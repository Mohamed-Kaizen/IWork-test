{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udee0 Status: In Development \u00b6 IWrok Test is currently in development. So we encourage you to use it and give us your feedback, but there are things that haven't been finalized yet and you can expect some changes. See the list of Known Issues and TODOs, below, for updates. Overview \u00b6 A test by IWork Requirements \u00b6 Backend \u00b6 Python 3.8+ Poetry (Optional) Other \u00b6 Git enjoy :) License: MIT \u00b6","title":"Home"},{"location":"#status-in-development","text":"IWrok Test is currently in development. So we encourage you to use it and give us your feedback, but there are things that haven't been finalized yet and you can expect some changes. See the list of Known Issues and TODOs, below, for updates.","title":"\ud83d\udee0 Status: In Development"},{"location":"#overview","text":"A test by IWork","title":"Overview"},{"location":"#requirements","text":"","title":"Requirements"},{"location":"#backend","text":"Python 3.8+ Poetry (Optional)","title":"Backend"},{"location":"#other","text":"Git enjoy :)","title":"Other"},{"location":"#license-mit","text":"","title":"License: MIT"},{"location":"command/","text":"Command \u00b6 Migration \u00b6 $ python manage.py makemigrations Migrations for 'users': users/migrations/0001_initial.py - Create model CustomUser - Create model Item ... $ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, users, sessions Running migrations: Rendering model states... DONE Applying users.0001_initial... OK ... Done :) Create super user \u00b6 $ python manage.py createsuperuser # username:$ mohamed # email:$ mohamed@etp.com # Password: $ # Repeat for confirmation: $ Done :) Running server \u00b6 $ python manage.py runserver Performing system checks... System check identified no issues (0 silenced). July 27, 2020 - 15:50:53 Django version 3.0, using settings 'etp.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C.","title":"Command"},{"location":"command/#command","text":"","title":"Command"},{"location":"command/#migration","text":"$ python manage.py makemigrations Migrations for 'users': users/migrations/0001_initial.py - Create model CustomUser - Create model Item ... $ python manage.py migrate Operations to perform: Apply all migrations: admin, auth, contenttypes, users, sessions Running migrations: Rendering model states... DONE Applying users.0001_initial... OK ... Done :)","title":"Migration"},{"location":"command/#create-super-user","text":"$ python manage.py createsuperuser # username:$ mohamed # email:$ mohamed@etp.com # Password: $ # Repeat for confirmation: $ Done :)","title":"Create super user"},{"location":"command/#running-server","text":"$ python manage.py runserver Performing system checks... System check identified no issues (0 silenced). July 27, 2020 - 15:50:53 Django version 3.0, using settings 'etp.settings' Starting development server at http://127.0.0.1:8000/ Quit the server with CONTROL-C.","title":"Running server"},{"location":"installation/","text":"Installation \u00b6 Fork repository and clone it. Shell or CMD $ git clone https://github.com/Mohamed-Kaizen/IWork-test ---> 100% Done :) install dependence \u00b6 Poetry $ cd IWork-test $ poetry install Resolving dependencies... ---> 100% Writing lock file Done :) Pip $ cd IWork-test $ pip install -r requirements.txt ---> 100% Done :) Environment Variables \u00b6 create .env in the root of the project or set your ENV add the following line into .env file or set your ENV: 1 2 3 4 5 6 DEBUG = True # change this in production ALLOWED_HOSTS = example . com , localhost , 0.0.0.0 , 127.0.0.1 # change this in production SECRET_KEY = w86k @ * ash * z ) dsxsoz + o * ne * ugb08 ( 4 nu13 % 8 ! m *+ 2 _e @ @7 hnx # change this in production and never put the production key here DATABASE_URL = sqlite : ///db.sqlite3 EMAIL_USER = example @ example . com EMAIL_PASSWORD = ''","title":"Installation"},{"location":"installation/#installation","text":"Fork repository and clone it. Shell or CMD $ git clone https://github.com/Mohamed-Kaizen/IWork-test ---> 100% Done :)","title":"Installation"},{"location":"installation/#install-dependence","text":"Poetry $ cd IWork-test $ poetry install Resolving dependencies... ---> 100% Writing lock file Done :) Pip $ cd IWork-test $ pip install -r requirements.txt ---> 100% Done :)","title":"install dependence"},{"location":"installation/#environment-variables","text":"create .env in the root of the project or set your ENV add the following line into .env file or set your ENV: 1 2 3 4 5 6 DEBUG = True # change this in production ALLOWED_HOSTS = example . com , localhost , 0.0.0.0 , 127.0.0.1 # change this in production SECRET_KEY = w86k @ * ash * z ) dsxsoz + o * ne * ugb08 ( 4 nu13 % 8 ! m *+ 2 _e @ @7 hnx # change this in production and never put the production key here DATABASE_URL = sqlite : ///db.sqlite3 EMAIL_USER = example @ example . com EMAIL_PASSWORD = ''","title":"Environment Variables"},{"location":"reference/product/models/","text":"\u00b6 Collection of model. Item \u00b6 Reference item model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in product/models.py def __str__ ( self : \"Item\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . name } \" item_slug_creator ( sender , instance , ** kwargs ) \u00b6 Slug generator for single for item. Source code in product/models.py @receiver ( pre_save , sender = Item ) def item_slug_creator ( sender : Item , instance : Item , ** kwargs : Any ) -> None : \"\"\"Slug generator for single for item.\"\"\" if not instance . slug : instance . slug = unique_slug ( title = instance . name )","title":"Models"},{"location":"reference/product/models/#product.models","text":"Collection of model.","title":"product.models"},{"location":"reference/product/models/#product.models.Item","text":"Reference item model.","title":"Item"},{"location":"reference/product/models/#product.models.Item.__str__","text":"It return readable name for the model. Source code in product/models.py def __str__ ( self : \"Item\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . name } \"","title":"__str__()"},{"location":"reference/product/models/#product.models.item_slug_creator","text":"Slug generator for single for item. Source code in product/models.py @receiver ( pre_save , sender = Item ) def item_slug_creator ( sender : Item , instance : Item , ** kwargs : Any ) -> None : \"\"\"Slug generator for single for item.\"\"\" if not instance . slug : instance . slug = unique_slug ( title = instance . name )","title":"item_slug_creator()"},{"location":"reference/product/utils/","text":"\u00b6 Collection of utils functions. random_string ( * , size = 6 , chars = 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' ) \u00b6 Generate random string. Parameters: Name Type Description Default size int Size of the random sting. 6 chars str A sting of chars to use. 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' Returns: Type Description str Random string. Source code in product/utils.py def random_string ( * , size : int = getattr ( settings , \"SLUG_ADDITIONAL_SIZE\" , 6 ), chars : str = getattr ( settings , \"SLUG_RANDOM_CHARS\" , chars_string ), ) -> str : \"\"\"Generate random string. Args: size: Size of the random sting. chars: A sting of chars to use. Returns: Random string. \"\"\" return \"\" . join ( secrets . choice ( chars ) for _ in range ( size )) unique_slug ( * , title , new_slug = None ) \u00b6 Create unique slug. Parameters: Name Type Description Default title str The text where the slug will be generate. required new_slug str Custom slug to hard code. None Returns: Type Description str The created slug or hard code slug Source code in product/utils.py def unique_slug ( * , title : str , new_slug : str = None ) -> str : \"\"\"Create unique slug. Args: title: The text where the slug will be generate. new_slug: Custom slug to hard code. Returns: The created slug or hard code slug \"\"\" if new_slug is None : slug = slugify ( title ) new_slug = f \" { slug } - { random_string () } \" return new_slug","title":"Utils"},{"location":"reference/product/utils/#product.utils","text":"Collection of utils functions.","title":"product.utils"},{"location":"reference/product/utils/#product.utils.random_string","text":"Generate random string. Parameters: Name Type Description Default size int Size of the random sting. 6 chars str A sting of chars to use. 'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' Returns: Type Description str Random string. Source code in product/utils.py def random_string ( * , size : int = getattr ( settings , \"SLUG_ADDITIONAL_SIZE\" , 6 ), chars : str = getattr ( settings , \"SLUG_RANDOM_CHARS\" , chars_string ), ) -> str : \"\"\"Generate random string. Args: size: Size of the random sting. chars: A sting of chars to use. Returns: Random string. \"\"\" return \"\" . join ( secrets . choice ( chars ) for _ in range ( size ))","title":"random_string()"},{"location":"reference/product/utils/#product.utils.unique_slug","text":"Create unique slug. Parameters: Name Type Description Default title str The text where the slug will be generate. required new_slug str Custom slug to hard code. None Returns: Type Description str The created slug or hard code slug Source code in product/utils.py def unique_slug ( * , title : str , new_slug : str = None ) -> str : \"\"\"Create unique slug. Args: title: The text where the slug will be generate. new_slug: Custom slug to hard code. Returns: The created slug or hard code slug \"\"\" if new_slug is None : slug = slugify ( title ) new_slug = f \" { slug } - { random_string () } \" return new_slug","title":"unique_slug()"},{"location":"reference/users/adapter/","text":"\u00b6 Collection django-allauth adapter. CustomAccountAdapter \u00b6 Custom account adapter. clean_email ( self , email ) \u00b6 Extra validation for email. Parameters: Name Type Description Default email str Email to check. required Returns: Type Description str email if it valid or raise exception Source code in users/adapter.py def clean_email ( self : \"CustomAccountAdapter\" , email : str ) -> str : \"\"\"Extra validation for email. Args: email: Email to check. Returns: email if it valid or raise exception Raises: ValidationError If email is not valid. \"\"\" email = super () . clean_email ( email ) local_part , domain = email . split ( \"@\" ) validate_reserved_name ( value = local_part , exception_class = ValidationError ) validate_confusables_email ( local_part = local_part , domain = domain , exception_class = ValidationError , ) return email clean_username ( self , username , shallow = False ) \u00b6 Extra validation for username. Parameters: Name Type Description Default username str Username to check. required shallow bool bool field. False Returns: Type Description str username if it valid or raise exception Source code in users/adapter.py def clean_username ( self : \"CustomAccountAdapter\" , username : str , shallow : bool = False ) -> str : \"\"\"Extra validation for username. Args: username: Username to check. shallow: bool field. Returns: username if it valid or raise exception Raises: ValidationError If username is not valid. \"\"\" username = super () . clean_username ( username , shallow ) validate_reserved_name ( value = username , exception_class = ValidationError ) validate_confusables ( value = username , exception_class = ValidationError ) return username save_user ( self , request , user , form , commit = False ) \u00b6 Extra validation for email. Parameters: Name Type Description Default request Request Request object required user Any ? required form Any ? required commit bool bool field to indicted when to commit. False Returns: Type Description Any user object Source code in users/adapter.py def save_user ( self : \"CustomAccountAdapter\" , request : Request , user : Any , form : Any , commit : bool = False , ) -> Any : \"\"\"Extra validation for email. Args: request: Request object user: ? form: ? commit: bool field to indicted when to commit. Returns: user object \"\"\" user = super () . save_user ( request , user , form , commit ) data = form . cleaned_data user . phone_number = data . get ( \"phone_number\" ) user . full_name = data . get ( \"full_name\" ) user . picture = data . get ( \"picture\" ) user . save () return user","title":"Adapter"},{"location":"reference/users/adapter/#users.adapter","text":"Collection django-allauth adapter.","title":"users.adapter"},{"location":"reference/users/adapter/#users.adapter.CustomAccountAdapter","text":"Custom account adapter.","title":"CustomAccountAdapter"},{"location":"reference/users/adapter/#users.adapter.CustomAccountAdapter.clean_email","text":"Extra validation for email. Parameters: Name Type Description Default email str Email to check. required Returns: Type Description str email if it valid or raise exception Source code in users/adapter.py def clean_email ( self : \"CustomAccountAdapter\" , email : str ) -> str : \"\"\"Extra validation for email. Args: email: Email to check. Returns: email if it valid or raise exception Raises: ValidationError If email is not valid. \"\"\" email = super () . clean_email ( email ) local_part , domain = email . split ( \"@\" ) validate_reserved_name ( value = local_part , exception_class = ValidationError ) validate_confusables_email ( local_part = local_part , domain = domain , exception_class = ValidationError , ) return email","title":"clean_email()"},{"location":"reference/users/adapter/#users.adapter.CustomAccountAdapter.clean_username","text":"Extra validation for username. Parameters: Name Type Description Default username str Username to check. required shallow bool bool field. False Returns: Type Description str username if it valid or raise exception Source code in users/adapter.py def clean_username ( self : \"CustomAccountAdapter\" , username : str , shallow : bool = False ) -> str : \"\"\"Extra validation for username. Args: username: Username to check. shallow: bool field. Returns: username if it valid or raise exception Raises: ValidationError If username is not valid. \"\"\" username = super () . clean_username ( username , shallow ) validate_reserved_name ( value = username , exception_class = ValidationError ) validate_confusables ( value = username , exception_class = ValidationError ) return username","title":"clean_username()"},{"location":"reference/users/adapter/#users.adapter.CustomAccountAdapter.save_user","text":"Extra validation for email. Parameters: Name Type Description Default request Request Request object required user Any ? required form Any ? required commit bool bool field to indicted when to commit. False Returns: Type Description Any user object Source code in users/adapter.py def save_user ( self : \"CustomAccountAdapter\" , request : Request , user : Any , form : Any , commit : bool = False , ) -> Any : \"\"\"Extra validation for email. Args: request: Request object user: ? form: ? commit: bool field to indicted when to commit. Returns: user object \"\"\" user = super () . save_user ( request , user , form , commit ) data = form . cleaned_data user . phone_number = data . get ( \"phone_number\" ) user . full_name = data . get ( \"full_name\" ) user . picture = data . get ( \"picture\" ) user . save () return user","title":"save_user()"},{"location":"reference/users/context_processors/","text":"\u00b6 Collection of template processor. from_settings ( request ) \u00b6 Custom template processor to show current env. Source code in users/context_processors.py def from_settings ( request : Request ) -> Dict [ str , Any ]: \"\"\"Custom template processor to show current env.\"\"\" return { \"ENVIRONMENT_NAME\" : settings . ENVIRONMENT_NAME , \"ENVIRONMENT_COLOR\" : settings . ENVIRONMENT_COLOR , }","title":"Context Processors"},{"location":"reference/users/context_processors/#users.context_processors","text":"Collection of template processor.","title":"users.context_processors"},{"location":"reference/users/context_processors/#users.context_processors.from_settings","text":"Custom template processor to show current env. Source code in users/context_processors.py def from_settings ( request : Request ) -> Dict [ str , Any ]: \"\"\"Custom template processor to show current env.\"\"\" return { \"ENVIRONMENT_NAME\" : settings . ENVIRONMENT_NAME , \"ENVIRONMENT_COLOR\" : settings . ENVIRONMENT_COLOR , }","title":"from_settings()"},{"location":"reference/users/forms/","text":"\u00b6 Collection of forms. CustomUserChangeForm \u00b6 Custom form for users change form in admin page. Meta \u00b6 Meta data. model \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/forms.py def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \" clean_email ( self ) \u00b6 Extra validation for email. Source code in users/forms.py def clean_email ( self : \"CustomUserChangeForm\" ) -> Any : \"\"\"Extra validation for email.\"\"\" email = self . data . get ( \"email\" ) local_part , domain = email . split ( \"@\" ) validate_confusables_email ( local_part = local_part , domain = domain , exception_class = ValidationError ) validate_reserved_name ( value = local_part , exception_class = ValidationError ) return self . cleaned_data [ \"email\" ] clean_username ( self ) \u00b6 Extra validation for username. Source code in users/forms.py def clean_username ( self : \"CustomUserChangeForm\" ) -> Any : \"\"\"Extra validation for username.\"\"\" username = self . data . get ( \"username\" ) validate_confusables ( value = username , exception_class = ValidationError ) validate_reserved_name ( value = username , exception_class = ValidationError ) return self . cleaned_data [ \"username\" ] CustomUserCreationForm \u00b6 Custom form for users creation form in admin page. Meta \u00b6 Meta data. model \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/forms.py def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \" clean_email ( self ) \u00b6 Extra validation for email. Source code in users/forms.py def clean_email ( self : \"CustomUserCreationForm\" ) -> Any : \"\"\"Extra validation for email.\"\"\" email = self . data . get ( \"email\" ) local_part , domain = email . split ( \"@\" ) validate_confusables_email ( local_part = local_part , domain = domain , exception_class = ValidationError ) validate_reserved_name ( value = local_part , exception_class = ValidationError ) return self . cleaned_data [ \"email\" ] clean_username ( self ) \u00b6 Extra validation for username. Source code in users/forms.py def clean_username ( self : \"CustomUserCreationForm\" ) -> Any : \"\"\"Extra validation for username.\"\"\" username = self . data . get ( \"username\" ) validate_confusables ( value = username , exception_class = ValidationError ) validate_reserved_name ( value = username , exception_class = ValidationError ) return self . cleaned_data [ \"username\" ]","title":"Forms"},{"location":"reference/users/forms/#users.forms","text":"Collection of forms.","title":"users.forms"},{"location":"reference/users/forms/#users.forms.CustomUserChangeForm","text":"Custom form for users change form in admin page.","title":"CustomUserChangeForm"},{"location":"reference/users/forms/#users.forms.CustomUserChangeForm.Meta","text":"Meta data.","title":"Meta"},{"location":"reference/users/forms/#users.forms.CustomUserChangeForm.Meta.model","text":"Reference user model.","title":"model"},{"location":"reference/users/forms/#users.forms.CustomUserChangeForm.Meta.model.__str__","text":"It return readable name for the model. Source code in users/forms.py def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/forms/#users.forms.CustomUserChangeForm.clean_email","text":"Extra validation for email. Source code in users/forms.py def clean_email ( self : \"CustomUserChangeForm\" ) -> Any : \"\"\"Extra validation for email.\"\"\" email = self . data . get ( \"email\" ) local_part , domain = email . split ( \"@\" ) validate_confusables_email ( local_part = local_part , domain = domain , exception_class = ValidationError ) validate_reserved_name ( value = local_part , exception_class = ValidationError ) return self . cleaned_data [ \"email\" ]","title":"clean_email()"},{"location":"reference/users/forms/#users.forms.CustomUserChangeForm.clean_username","text":"Extra validation for username. Source code in users/forms.py def clean_username ( self : \"CustomUserChangeForm\" ) -> Any : \"\"\"Extra validation for username.\"\"\" username = self . data . get ( \"username\" ) validate_confusables ( value = username , exception_class = ValidationError ) validate_reserved_name ( value = username , exception_class = ValidationError ) return self . cleaned_data [ \"username\" ]","title":"clean_username()"},{"location":"reference/users/forms/#users.forms.CustomUserCreationForm","text":"Custom form for users creation form in admin page.","title":"CustomUserCreationForm"},{"location":"reference/users/forms/#users.forms.CustomUserCreationForm.Meta","text":"Meta data.","title":"Meta"},{"location":"reference/users/forms/#users.forms.CustomUserCreationForm.Meta.model","text":"Reference user model.","title":"model"},{"location":"reference/users/forms/#users.forms.CustomUserCreationForm.Meta.model.__str__","text":"It return readable name for the model. Source code in users/forms.py def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/forms/#users.forms.CustomUserCreationForm.clean_email","text":"Extra validation for email. Source code in users/forms.py def clean_email ( self : \"CustomUserCreationForm\" ) -> Any : \"\"\"Extra validation for email.\"\"\" email = self . data . get ( \"email\" ) local_part , domain = email . split ( \"@\" ) validate_confusables_email ( local_part = local_part , domain = domain , exception_class = ValidationError ) validate_reserved_name ( value = local_part , exception_class = ValidationError ) return self . cleaned_data [ \"email\" ]","title":"clean_email()"},{"location":"reference/users/forms/#users.forms.CustomUserCreationForm.clean_username","text":"Extra validation for username. Source code in users/forms.py def clean_username ( self : \"CustomUserCreationForm\" ) -> Any : \"\"\"Extra validation for username.\"\"\" username = self . data . get ( \"username\" ) validate_confusables ( value = username , exception_class = ValidationError ) validate_reserved_name ( value = username , exception_class = ValidationError ) return self . cleaned_data [ \"username\" ]","title":"clean_username()"},{"location":"reference/users/models/","text":"\u00b6 Collection of model. CustomUser \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/models.py def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"Models"},{"location":"reference/users/models/#users.models","text":"Collection of model.","title":"users.models"},{"location":"reference/users/models/#users.models.CustomUser","text":"Reference user model.","title":"CustomUser"},{"location":"reference/users/models/#users.models.CustomUser.__str__","text":"It return readable name for the model. Source code in users/models.py def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/validators/","text":"\u00b6 Reusable validators. validate_confusables ( * , value , exception_class ) \u00b6 Disallows 'dangerous' usernames likely to represent homograph attacks. A username is 'dangerous' if it is mixed-script (as defined by Unicode 'Script' property) and contains one or more characters appearing in the Unicode Visually Confusable Characters file. Parameters: Name Type Description Default value str string. required exception_class Callable Callable Exception class required Examples: >>> from users import validators >>> validators . validate_confusables ( value = \"\u0391laskaJazz\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : This name cannot be registered . Please choose a different name . >>> validators . validate_confusables ( value = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py def validate_confusables ( * , value : str , exception_class : Callable ) -> None : \"\"\"Disallows 'dangerous' usernames likely to represent homograph attacks. A username is 'dangerous' if it is mixed-script (as defined by Unicode 'Script' property) and contains one or more characters appearing in the Unicode Visually Confusable Characters file. Args: value: string. exception_class: Callable Exception class Examples: >>> from users import validators >>> validators.validate_confusables(value=\"\u0391laskaJazz\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: This name cannot be registered.Please choose a different name. >>> validators.validate_confusables(value=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if confusables . is_dangerous ( value ): raise exception_class ( CONFUSABLE , code = _ ( \"invalid\" )) validate_confusables_email ( * , local_part , domain , exception_class ) \u00b6 Disallows 'dangerous' email addresses likely to represent homograph attacks. An email address is 'dangerous' if either the local-part or the domain, considered on their own, are mixed-script and contain one or more characters appearing in the Unicode Visually Confusable Characters file. Parameters: Name Type Description Default local_part str the local part of the email addres, before @. required domain str the domain part of the email addres, after @. required exception_class Callable Callable Exception class required Examples: >>> from users import validators >>> validators . validate_confusables_email ( local_part = \"\u0391laskaJazz\" , domain = \"\u0391laskaJazz\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : This email address cannot be registered . Please supply a different email address . >>> validators . validate_confusables_email ( local_part = \"123\" , domain = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py def validate_confusables_email ( * , local_part : str , domain : str , exception_class : Callable ) -> None : \"\"\"Disallows 'dangerous' email addresses likely to represent homograph attacks. An email address is 'dangerous' if either the local-part or the domain, considered on their own, are mixed-script and contain one or more characters appearing in the Unicode Visually Confusable Characters file. Args: local_part: the local part of the email addres, before @. domain: the domain part of the email addres, after @. exception_class: Callable Exception class Examples: >>> from users import validators >>> validators.validate_confusables_email(local_part=\"\u0391laskaJazz\", domain=\"\u0391laskaJazz\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: This email address cannot be registered. Please supply a different email address. >>> validators.validate_confusables_email(local_part=\"123\", domain=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if confusables . is_dangerous ( local_part ) or confusables . is_dangerous ( domain ): raise exception_class ( CONFUSABLE_EMAIL , code = _ ( \"invalid\" )) validate_reserved_name ( * , value , exception_class ) \u00b6 Disallows many reserved names as form field values. Parameters: Name Type Description Default value str string. required exception_class Callable Callable Exception class. required Examples: >>> from users import validators >>> validators . validate_reserved_name ( value = \"admin\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : admin is reserved and cannot be registered . >>> validators . validate_reserved_name ( value = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py def validate_reserved_name ( * , value : str , exception_class : Callable ) -> None : \"\"\"Disallows many reserved names as form field values. Args: value: string. exception_class: Callable Exception class. Examples: >>> from users import validators >>> validators.validate_reserved_name(value=\"admin\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: admin is reserved and cannot be registered. >>> validators.validate_reserved_name(value=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if value in DEFAULT_RESERVED_NAMES or value . startswith ( \".well-known\" ): raise exception_class ( f \" { value } is reserved and cannot be registered.\" )","title":"Validators"},{"location":"reference/users/validators/#users.validators","text":"Reusable validators.","title":"users.validators"},{"location":"reference/users/validators/#users.validators.validate_confusables","text":"Disallows 'dangerous' usernames likely to represent homograph attacks. A username is 'dangerous' if it is mixed-script (as defined by Unicode 'Script' property) and contains one or more characters appearing in the Unicode Visually Confusable Characters file. Parameters: Name Type Description Default value str string. required exception_class Callable Callable Exception class required Examples: >>> from users import validators >>> validators . validate_confusables ( value = \"\u0391laskaJazz\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : This name cannot be registered . Please choose a different name . >>> validators . validate_confusables ( value = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py def validate_confusables ( * , value : str , exception_class : Callable ) -> None : \"\"\"Disallows 'dangerous' usernames likely to represent homograph attacks. A username is 'dangerous' if it is mixed-script (as defined by Unicode 'Script' property) and contains one or more characters appearing in the Unicode Visually Confusable Characters file. Args: value: string. exception_class: Callable Exception class Examples: >>> from users import validators >>> validators.validate_confusables(value=\"\u0391laskaJazz\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: This name cannot be registered.Please choose a different name. >>> validators.validate_confusables(value=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if confusables . is_dangerous ( value ): raise exception_class ( CONFUSABLE , code = _ ( \"invalid\" ))","title":"validate_confusables()"},{"location":"reference/users/validators/#users.validators.validate_confusables_email","text":"Disallows 'dangerous' email addresses likely to represent homograph attacks. An email address is 'dangerous' if either the local-part or the domain, considered on their own, are mixed-script and contain one or more characters appearing in the Unicode Visually Confusable Characters file. Parameters: Name Type Description Default local_part str the local part of the email addres, before @. required domain str the domain part of the email addres, after @. required exception_class Callable Callable Exception class required Examples: >>> from users import validators >>> validators . validate_confusables_email ( local_part = \"\u0391laskaJazz\" , domain = \"\u0391laskaJazz\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : This email address cannot be registered . Please supply a different email address . >>> validators . validate_confusables_email ( local_part = \"123\" , domain = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py def validate_confusables_email ( * , local_part : str , domain : str , exception_class : Callable ) -> None : \"\"\"Disallows 'dangerous' email addresses likely to represent homograph attacks. An email address is 'dangerous' if either the local-part or the domain, considered on their own, are mixed-script and contain one or more characters appearing in the Unicode Visually Confusable Characters file. Args: local_part: the local part of the email addres, before @. domain: the domain part of the email addres, after @. exception_class: Callable Exception class Examples: >>> from users import validators >>> validators.validate_confusables_email(local_part=\"\u0391laskaJazz\", domain=\"\u0391laskaJazz\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: This email address cannot be registered. Please supply a different email address. >>> validators.validate_confusables_email(local_part=\"123\", domain=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if confusables . is_dangerous ( local_part ) or confusables . is_dangerous ( domain ): raise exception_class ( CONFUSABLE_EMAIL , code = _ ( \"invalid\" ))","title":"validate_confusables_email()"},{"location":"reference/users/validators/#users.validators.validate_reserved_name","text":"Disallows many reserved names as form field values. Parameters: Name Type Description Default value str string. required exception_class Callable Callable Exception class. required Examples: >>> from users import validators >>> validators . validate_reserved_name ( value = \"admin\" , exception_class = ValueError ) # noqa: B950 Traceback ( most recent call last ): ... ValueError : admin is reserved and cannot be registered . >>> validators . validate_reserved_name ( value = \"123\" , exception_class = ValueError ) None Exceptions: Type Description exception_class call the exception class if the value is dangerous. Source code in users/validators.py def validate_reserved_name ( * , value : str , exception_class : Callable ) -> None : \"\"\"Disallows many reserved names as form field values. Args: value: string. exception_class: Callable Exception class. Examples: >>> from users import validators >>> validators.validate_reserved_name(value=\"admin\", exception_class=ValueError) # noqa: B950 Traceback (most recent call last): ... ValueError: admin is reserved and cannot be registered. >>> validators.validate_reserved_name(value=\"123\", exception_class=ValueError) None Raises: exception_class: call the exception class if the value is dangerous. \"\"\" if value in DEFAULT_RESERVED_NAMES or value . startswith ( \".well-known\" ): raise exception_class ( f \" { value } is reserved and cannot be registered.\" )","title":"validate_reserved_name()"},{"location":"reference/users/views/","text":"\u00b6 Collection views. SignInAPI \u00b6 Sign in API endpoint. post ( self , request , * args , ** kwargs ) \u00b6 Post method for SignInAPI. Source code in users/views.py def post ( self : \"SignInAPI\" , request : Request , * args : List , ** kwargs : Dict ) -> Response : \"\"\"Post method for SignInAPI.\"\"\" serializer = self . serializer_class ( data = request . data , context = { \"request\" : request } ) serializer . is_valid ( raise_exception = True ) user = serializer . validated_data [ \"user\" ] token , created = Token . objects . get_or_create ( user = user ) return Response ( { \"token\" : token . key , \"username\" : user . username , } ) SignUpAPI \u00b6 Sign up API endpoint. serializer_class marshmallow-model \u00b6 User signup serializer. Meta \u00b6 Meta data. model \u00b6 Reference user model. __str__ ( self ) special \u00b6 It return readable name for the model. Source code in users/views.py def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \" create ( self , validated_data ) \u00b6 Create method for UserSignUpSerializer. Source code in users/views.py def create ( self : \"UserSignUpSerializer\" , validated_data : Dict ) -> CustomUser : \"\"\"Create method for UserSignUpSerializer.\"\"\" password = validated_data . pop ( \"password\" ) username = validated_data . get ( \"username\" ) email = validated_data . get ( \"email\" ) local , domain = email . split ( \"@\" ) validate_reserved_name ( value = username , exception_class = exceptions . ValidationError ) validate_reserved_name ( value = local , exception_class = exceptions . ValidationError ) validate_confusables ( value = username , exception_class = exceptions . ValidationError ) validate_confusables_email ( local_part = local , domain = domain , exception_class = exceptions . ValidationError ) user = CustomUser ( ** validated_data ) user . set_password ( password ) user . save () return user validate_password ( self , value ) \u00b6 Password validation. Source code in users/views.py def validate_password ( self : \"UserSignUpSerializer\" , value : str ) -> str : \"\"\"Password validation.\"\"\" validate_password ( value , self . instance ) return value","title":"Views"},{"location":"reference/users/views/#users.views","text":"Collection views.","title":"users.views"},{"location":"reference/users/views/#users.views.SignInAPI","text":"Sign in API endpoint.","title":"SignInAPI"},{"location":"reference/users/views/#users.views.SignInAPI.post","text":"Post method for SignInAPI. Source code in users/views.py def post ( self : \"SignInAPI\" , request : Request , * args : List , ** kwargs : Dict ) -> Response : \"\"\"Post method for SignInAPI.\"\"\" serializer = self . serializer_class ( data = request . data , context = { \"request\" : request } ) serializer . is_valid ( raise_exception = True ) user = serializer . validated_data [ \"user\" ] token , created = Token . objects . get_or_create ( user = user ) return Response ( { \"token\" : token . key , \"username\" : user . username , } )","title":"post()"},{"location":"reference/users/views/#users.views.SignUpAPI","text":"Sign up API endpoint.","title":"SignUpAPI"},{"location":"reference/users/views/#users.views.SignUpAPI.serializer_class","text":"User signup serializer.","title":"serializer_class"},{"location":"reference/users/views/#users.views.SignUpAPI.serializer_class.Meta","text":"Meta data.","title":"Meta"},{"location":"reference/users/views/#users.views.SignUpAPI.serializer_class.Meta.model","text":"Reference user model.","title":"model"},{"location":"reference/users/views/#users.views.SignUpAPI.serializer_class.Meta.model.__str__","text":"It return readable name for the model. Source code in users/views.py def __str__ ( self : \"CustomUser\" ) -> str : \"\"\"It return readable name for the model.\"\"\" return f \" { self . username } \"","title":"__str__()"},{"location":"reference/users/views/#users.views.SignUpAPI.serializer_class.create","text":"Create method for UserSignUpSerializer. Source code in users/views.py def create ( self : \"UserSignUpSerializer\" , validated_data : Dict ) -> CustomUser : \"\"\"Create method for UserSignUpSerializer.\"\"\" password = validated_data . pop ( \"password\" ) username = validated_data . get ( \"username\" ) email = validated_data . get ( \"email\" ) local , domain = email . split ( \"@\" ) validate_reserved_name ( value = username , exception_class = exceptions . ValidationError ) validate_reserved_name ( value = local , exception_class = exceptions . ValidationError ) validate_confusables ( value = username , exception_class = exceptions . ValidationError ) validate_confusables_email ( local_part = local , domain = domain , exception_class = exceptions . ValidationError ) user = CustomUser ( ** validated_data ) user . set_password ( password ) user . save () return user","title":"create()"},{"location":"reference/users/views/#users.views.SignUpAPI.serializer_class.validate_password","text":"Password validation. Source code in users/views.py def validate_password ( self : \"UserSignUpSerializer\" , value : str ) -> str : \"\"\"Password validation.\"\"\" validate_password ( value , self . instance ) return value","title":"validate_password()"}]}